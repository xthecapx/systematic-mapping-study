title;keywords;abstract;type;year;Publisher;URL;attributes;metrics;challenges
Challenges in HPCQC Integration;"Quantum computers; Complex infrastructures; Computing infrastructures; Performance computing; Quantum Computing; Quantum technologies; Quantum-classical; Integration";Quantum computing's potential as an adjunct to high-performance computing (HPC) infrastructure is clear, but the integration of the two (HPCQC) faces numerous challenges. These issues primarily lie in the complex infrastructure needed for integration. Key to the HPCQC integration is the creation of a unified hybrid quantum-classical toolchain that reduces latency and supports various quantum technologies. Other obstacles include hardware-related requirements like maintaining uptime and networking. This poster focuses on the challenges.  ?? 2023 IEEE.;Conference paper;2023;2023 IEEE International Conference on Quantum Computing and Engineering (QCE);https://qce.quantum.ieee.org/2023/;"1. scheduling: Ensuring that single tasks do not block access to the limited resources
2. scalability: The complexity increases significantly when quantum characteristics, such as qubit connectivity, fidelity, and decoherence times, are included.
3. Latency: It is necessary to keep latency as low as possible to utilize scarce and expensive resources effectively. For multiple measurements, communication quickly becomes the bottleneck, when considering an HPC system a classical device
4. data management: Ensuring efficient coordination between quantum and classical systems, integrating quantum data with classical data, and achieving seamless interfaces between HPC and QC systems are critical challenges";No;The challenges identified for integrating quantum computers into HPC systems include scalability, supporting different quantum technologies, managing latency, data, and resources effectively, and establishing standardization
Addressing Temporal Variations in Qubit Quality Metrics for Parameterized Quantum Circuits;"Quantum Computing; Parameterized Quantum Circuits; Fidelity; Decoherence; Noise";The public access to noisy intermediate-scale quantum (NISQ) computers facilitated by IBM, Rigetti, D-Wave, etc., has propelled the development of quantum applications that may offer quantum supremacy in the future large-scale quantum computers. Parameterized quantum circuits (PQC) have emerged as a major driver for the development of quantum routines that potentially improve the circuit's resilience to the noise. PQC's have been applied in both generative (e.g. generative adversarial network) and discriminative (e.g. quantum classifier) tasks in the field of quantum machine learning. PQC's have been also considered to realize high fidelity quantum gates with the available imperfect native gates of a target quantum hardware. Parameters of a PQC are determined through an iterative training process for a target noisy quantum hardware. However, temporal variations in qubit quality metrics affect the performance of a PQC. Therefore, the circuit that is trained without considering temporal variations exhibits poor fidelity over time. In this paper, we present training methodologies for PQC in a completely classical environment that can improve the fidelity of the trained PQC on a target NISQ hardware by as much as 21.91%.;Conference paper;2019;2019 IEEE/ACM International Symposium on Low Power Electronics and Design (ISLPED);https://islped.org/2019/;No;T1 relaxation time, T2 dephasing time, single-qubit gate error, multi-qubit gate error, readout error;No
Software quality issues in quantum information systems;"Quantum computing; Quantum quality environment; Quantum software quality";Quantum computing is the technology of the 21st century. Quantum computers and environments are already offering great advantages when building advanced applications in finance, health, or logistics. However, if industry is to boost the large-scale production of quantum software, an adequate quality level must be achieved and assured. In this sense, it is very important to consider quantum software quality platforms and products, and to create an effective quality environment for quantum software. In this paper we will summarise some of these issues. ?? 2021 Copyright for this paper by its authors.;Conference paper;2021;2nd Quantum Software and Engineering Workshop (QSET*21);https://dblp.org/db/conf/qce/qset2021.html, https://quset.github.io/qset2021/;"1. verified compilation
2. verification protocols
3. relational verification of quantum programs
4. formal quantum programs description
5. formal verification and programs certification
6. equivalence checking for quantum circuits
7. understandability: is a subcharacteristic which needs to be strongly modified for quantum programs
8. software quality model aligned with the general ISO/IEC standards family: performance efficiency, maintainability, portability, compatibility, etc.
9. new attributes: accuracy or precision, decoherence (due to errors in quantum computers)";1. power of quantum computing: quantum volume, total quantum factor (TQF), wd (width, depth);No
Research on Quality Model for Quantum Simulator Software;"Evaluation; Quantum Simulator; Software Quality";In recent years, the demand for arithmetic power from all walks of life is growing, especially the increasing popularity of AIGC, which makes people realize that huge technological progress cannot be made without the support of large arithmetic power. Quantum computing may bring a leap in computing power and become a 'trigger' and 'catalyst' to accelerate the development of science and technology innovation, and its technical development trend and application prospects have become a hot issue of concern, and quantum simulators are a very important part of the development process. The development of quantum simulators is a very important part of the process. However, due to the lack of systematic evaluation theories and methods, it is difficult to quantify and analyze the quality of the increasing number of simulators on the market, which may hinder researchers from practicing their quantum algorithms objectively or developing quantum technologies. For these reasons, this paper proposes a quality model for quantum simulator software, which reflects the quality characteristics of simulators in seven aspects, such as functionality and performance efficiency, and selects some simulators for experimental validation of the proposed model to prove its rationality. ?? 2023 IEEE.;Conference paper;2023;25th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD2023);https://acisinternational.org/conferences/snpd-2023-winter/;"1. we evaluate the quality of classical software by using the model raised in ISO/IEC 25010:2011 and the evaluation methods mentioned in ISO/IEC 25051:2014
2. We have retained the 6 measures of the classic software quality model, including Functional Suitability, Performance Efficiency, Usability, Reliability, Security and Maintainability
3. Functional Suitability: completeness, correctness, suitability, simulation accuracy, prediction accuracy
4. Performance Efficiency: computing speed & maximum simulation size & supported types, resource utilization
5. Usability: operability, configurability, programmability, understandability, interface friendliness
6. Reliability: maturity, availability, fault tolerance, recoverability
7. Security: confidentiality, integrity
8. Maintainability: reusability, analyzability, dev & maintenance plan
9. User Documentation Set: Is it easy to learn, Is available, Contains keywords or not, Is it complete, Is the description correct, Is it consistent, Is it easy to understand, Product quality, Is it valid, Quality of use
10. Simulator evaluation: Functional Fitness, Performance efficiency, Availability, Reliability, Security, Maintainability, User documentation set";No;No
Challenges and opportunities in quantum machine learning;"High energy physics; Learning systems; Quantum computers; 'current; High-energy physics; Machine learning models; Machine-learning; Quantum Computing; Quantum data; Quantum machines; Quantum neural networks; Deep learning";At the intersection of machine learning and quantum computing, quantum machine learning has the potential of accelerating data analysis, especially for quantum data, with applications for quantum materials, biochemistry and high-energy physics. Nevertheless, challenges remain regarding the trainability of quantum machine learning models. Here we review current methods and applications for quantum machine learning. We highlight differences between quantum and classical machine learning, with a focus on quantum neural networks and quantum deep learning. Finally, we discuss opportunities for quantum advantage with quantum machine learning. ?? 2022, Springer Nature America, Inc.;Article;2022;Nature;https://www.nature.com/natcomputsci;No;No;"1. Embedding schemes and quantum datasets. The access to high-quality, standardized datasets has played a key role in advancing classical ML.
2. it is still unclear how to best encode classical information onto quantum states
3. The inner product between output states of the embedding is classically hard to simulate
4. some recent results suggest that achieving a quan- tum advantage with classical data might not be straightforward
5. the quantum loss landscape can have many local minima. Ultimately, this can lead to the overall non-convex optimization being NP-hard
6. QNN architecture design
7. Effect of quantum noise"
Studying efficacy of traditional software quality parameters in quantum software engineering;"Quantum Computing; Software Quality; Quality Attributes; Quantum Impacts; Quality models";Classical computing, which gave us the current digital age, is about to be overriden by a more exciting, powerful, and radically distinct form of computing technology termed as quantum computing. Quantum-based computing may eventually be many times faster than the computing capability that we all use today in our smart phones, laptop computers, and other devices. By leveraging the fundamentals of quantum mechanics, quantum potential is initially focused in this research paper. A baseline has been defined to get through the fundamentals of quantum computing. To get insights, currently available quantum computing platforms or environments are described. Software quality models are investigated to enlist detailed software quality attributes and their relevance for different software application types. We have presented characteristics of quantum computers or quantum processors that may be pertinent to understanding or reasoning about software quality attributes. How these quantum computing characteristics (QCCs) may impact quality of quantum software, is analyzed in the end.;Article;2022;Springer: Optical and Quantum Electronics;https://link.springer.com/journal/11082;"1. To assess software quality, ISO/IEC (Lin 2014 ) 9126 model (Challa and Paul 2011) provide six main characteristics of a software such as Functionality, Maintainability, Reli- ability, Usability, Efficiency and Portability.
ISO/IEC 9126
2. Functionality: Suitability, Compliance, Interoperability, Security, Maturity
3. Efficiency: Time behavior, Resource behavior, Analyzability
4. Usability: Learnability, Operability
5. Reliability: Fault tolerance, Recoverability, Understandability
6. Maintainability: Changeability, Stability, Testability, Adaptability
7. Portability: Installability, Conformance, Replaceability
ISO/IEC 25010
8. Functional Suitability: Correctness, Appropriateness, Completeness
9. Performance Efficiency: Resource utilization, Capacity
10. Usability: Appropriateness Recognizability, User Error Protection, User Interface Aesthetics, Accessibility
11. Reliability: Maturity, Availability
12. Maintainability: Modularity, Reusability, Analyzability
13. Portability: Installability, Adaptability, Replaceability
14. Compatibility: Co-existence, Interoperability
15. Security: Confidentiality, Integrity, Non-repudiation, Authenticity, Accountability";No;No
Quantum service-oriented computing: current landscape and challenges;"Classical services; Hybrid classical-quantum software; Quality; Quantum services";The development that quantum computing technologies are achieving is beginning to attract the interest of companies that could potentially be users of quantum software. Thus, it is perfectly feasible that during the next few years hybrid systems will start to appear integrating both the classical software systems of companies and new quantum ones providing solutions to problems that still remain unmanageable today. A natural way to support such integration is Service-Oriented Computing. While conceptually the invocation of a quantum software service is similar to that of a classical one, technically there are many differences and technological limitations, which refer to platform independence, decoupling, scalability, etc. To highlight these differences and the difficulties to develop quality quantum services, this paper takes a well-known problem to which a quantum solution can be provided, integer factorization, making use of??the Amazon Braket quantum service platform. The exercise of trying to provide the factorization as a quantum service is carried out following the best practices, design patterns and standards existing in the implementation of classical services. This case study is used to highlight the rough edges and limitations that arise in the integration of classical-quantum hybrid systems using service-oriented computing. The conclusion of the study allows us to point out directions in which to focus research efforts in order to achieve effective quantum service-oriented computing. ?? 2022, The Author(s).;Article;2022;Springer: Software Quality Journal;https://link.springer.com/journal/11219;No;"1. number of qubits
2. number of shots:  the experiments must be performed several times or *shots* to be statistically consistent
3. precision of results
4. response times: the time elapsed between sending the request and receiving the result
5. economic cost";"1. the nonexistence of algorithms with do-it-yourself characteristics: each algorithm was designed for each particular computing hardware, many times having to recreate the algorithms for each new machine or even for each new increment of the problem
2.  it is necessary to offer solutions to non-specialized users for the utilization of quantum computing, such as the case of deployment of quantum services which allow hiding the complexity to users, only providing with entry end-points and returning the results of the execution.
3. Although the quantum circuit would be the same regardless of the quantum hardware or simulator used, the way in which the algorithm is invoked changes depending on where it will be run
4. services should be resilient and able to scale to address client demand: the technol- ogy to develop this feature in the quantum world does not yet exist.
5. monitor- ing and analysis tools"
An exploratory study on the challenges of engineering quantum applications in the cloud;"Cloud computing; Hybrid quantum applications; Quantum computing; Quantum-classic integration";The rapid evolution of quantum computation in the cloud creates considerable opportunities for multiple real-world application scenarios, including chemical simulation, optimization, and machine learning. Typical quantum applications are hybrid as they consist of both classical and quantum components. The latter require quantum computers for execution, which are often offered as cloud services. Thus, to implement quantum applications, developers need to have expertise in integration of quantum and classical components of the application, as well as understanding the relevant cloud-specific challenges and limitations. In this work, we explore the challenges which can be encountered when designing and implementing hybrid quantum applications in the cloud and identify which limitations of current quantum cloud services make such integration complex. To achieve this, we (i) implemented four quantum applications highlighting different scenarios of using quantum software components in cloud applications and (ii) analyzed the challenges and limitations encountered during the implementation process and documented the key observations. In addition, we discuss open research questions and ways to address them to improve the process of developing quantum applications in the cloud. ?? 2021 Copyright for this paper by its authors.;Conference paper;2021;IEEE: 2nd Quantum Software Engineering and Technology Workshop;https://quset.github.io/qset2021/;No;No;"1. the development of hQApps requires a team that combines not only quantum-specific expertise but also expertise in more traditional domains such as cloud computing, software integration, service-oriented architectures, and workflow technology.
2. splitting a problem into classical and quantum components: finding a suitable quantum-classical split is highly problem- dependent and requires further research
3. finding a suitable quantum-classical split is highly problem- dependent and requires further research
4. Quantum computers are often shared by multiple users, with quantum circuits typically being queued before execution.
5. The individual components need to be integrated to form the application system, raising the question of how to integrate quantum components with classical components.
6. the choice for certain quantum hardware influences the actual implementation."
Quantum Services Generation and*Deployment Process: A Quality-Oriented Approach;"Process improvement; Quantum Computing; Quantum Services; Quantum Software Quality";Quantum computing technology is revolutionizing the current world and is enabling the creation of advanced applications in various fields, such as healthcare and economics. However, for the industry to carry out mass production of quantum software, it is crucial to ensure an adequate level of quality. However, as quantum technologies move towards practical applications, they face significant challenges. Depending heavily on specific platforms, developers have difficulty creating quantum applications that can run on different quantum providers. Additionally, the lack of mature tools makes the creation of quantum applications a slow and complex process that requires specialized knowledge of quantum mechanics and computer science, where the quality of quantum services can be compromised. This article addresses the need to ensure an adequate level of quality in quantum software, and proposes a process that allows for the improvement of the current generation and deployment of quantum services while evaluating the quality of the created quantum services, using an extension of the OpenAPI Specification and the SonarQube tool. ?? 2023, The Author(s), under exclusive license to Springer Nature Switzerland AG.;Conference paper;2023;Springer: Communications in Computer and Information Science;https://2023.quatic.org/, https://www.springer.com/series/7899;No;"1. Circuit Size: 
width: the maximum number of qubits involved in a simultaneous operation
depth: the number of gate layers required to complete an algorithm.
2. Complexity of Gate Operations: the number of single-qubit and multiqubit gates in a quantum circuit
3. Number of Measurement Operations: The greater the number of measurements performed throughout the quantum code
N QM: Number of qubits with at least one *Measure* operation, 
% QM: Percentage of measured qubits
4. Number of Initialization and Reset Operations: the number of initialization operations";1. given the lack of a clear definition of metrics for quantum software, this tool does not yet have a specific measurement system for this type of software
Math and physics tools for quality quantum programming;"Quantum certification; Quantum literacy; Quantum math-physics; Quantum programming";We are in presence of a quantum computing revolution that will be critical for the dominant global position of nations in near future. Some quantum lab devices have been developed and important milestones have been reached, mainly in the branch of communications. In this scenario, it is urgent to educate people in quantum computing and technology, like it happens with disciplines such as science, technology, engineering, and mathematics promoted by government in order to instruct science-aware citizens. A solid knowledge base in math and physics is essential for a workforce able to develop high quality quantum technology. This work addresses the necessity of quantum literacy for the creation of a new workforce, proposing the basic math tools, and physics background for entering into the field of quantum programming. It also addresses a certification about Science Foundation for Quantum Programming, as a means for assuring the quality of quantum software professionals. ?? Springer Nature Switzerland AG 2020.;Conference paper;2020;Springer: Communications in Computer and Information Science;https://2020.quatic.org/, https://www.springer.com/series/7899;1. To produce quality quantum software, as with classical software, engineers and pro- grammers must have a set of scientific, technical and technological knowledge essential for developing the competences required to develop software.;No;No
Quantum Computing Platforms: Assessing the Impact on Quality Attributes and SDLC Activities;"Quantum Computing; Quantum Software Engineering; Software Development Life Cycle; Computing Platforms";Practical quantum computing is rapidly becoming a reality. To harness quantum computers' real potential in software applications, one needs to have an in-depth understanding of all such characteristics of quantum computing platforms (QCPs), relevant from the Software Engineering (SE) perspective. Restrictions on copying, deletion, the transmission of qubit states, a hard dependency on quantum algorithms are few, out of many, examples of QCP characteristics that have significant implications for building quantum software. Thus, developing quantum software requires a paradigm shift in thinking by software engineers. This paper presents the key findings from the SE perspective, resulting from an in-depth examination of state-of-the-art QCPs available today. The main contributions that we present include i) Proposing a general architecture of the QCPs, ii) Proposing a programming model for developing quantum software, iii) Determining architecturally significant characteristics of QCPs, and iv) Determining the impact of these characteristics on various Quality Attributes (QAs) and Software Development Life Cycle (SDLC) activities. We show that the nature of QCPs makes them useful mainly in specialized application areas such as scientific computing. Except for performance and scalability, most of the other QAs (e.g., maintainability, testability, and reliability) are adversely affected by different characteristics of a QCP.;Conference paper;2021;IEEE 18th International Conference on Software Architecture (ICSA);https://icsa-conferences.org/2021/;1) Availability 2) Interoperability 3) Maintainability 4) Manageability 5) Performance 6) Reliability 7) Scalability 8) Security 9) Testability 10) Usability;No;"1. To develop programs using such low levels of abstraction is error-prone and increases the complexity of the code
2. Heterogeneity makes it challenging to implement high software-cohesion
3. Quantum hardware requires an entirely different type of physical environment
4. The large form factor makes it difficult to augment the QCP capabilities, thus adversely affecting the scalability
5. Only a minimal portion of the quantum programming tools stack can be deployed and used on a programmer*s local machine
6. To exploit a quantum computer*s real potential, a programmer must express their software logic using quantum algorithms.
7. Software engineers have to map their problems to one of the existing few quantum algorithms, which adversely affects the ability to perform enhancement and corrective maintenance
8. There is a lack of standards necessary for developing quantum programs that can be executed transparently on different QPUs
9. The quantum processors are still controlled via classical computing operating systems
10. A programmer must rely on classical computer*s OS for achieving any type of multitasking and multiprocessing on a given set of QPUs.
11. Though limited time storage of entangled qubits is feasible, long term persistence of qubits in passive media is still impossible"
Towards a set of metrics for quantum circuits understandability;"Quantum circuits; Quantum metrics; Quantum circuits understandability; Quantum circuits complexity";Quantum computing is the basis of a new revolution. Several quantum computers are already available and, with them, quantum programming languages, quantum software development kits and platforms, quantum error correction and optimization tools are proposed and presented continuously. In connection with this, disciplines such as the Quantum Software Engineering are appearing for applying the knowledge acquired through time in their corresponding classical relatives. Besides, measurement is well known as a key factor for assessing, and improving if needed, the quality of any model in terms of, for instance, its understandability. The easier to understand a model is, the easier to maintain, reuse, etc. In this work, we present the definition of a set of metrics for assessing the understandability of quantum circuits. Some examples of the calculation of the metrics are also presented. This is just the beginning of a more thorough process in which they will be empirically validated by the performance of empirical studies, especially experiments.;Conference paper;2021;Springer: Communications in Computer and Information Science;https://2021.quatic.org/;No;"1. Circuit size. Intuitively, the bigger a circuit is the more complex to be understood should be too.
Width: Number of qubits in the circuit.
Depth: Maximum number of operations applied to a qubit in the circuit.
2. Circuit density: referred to the quantity of gates applied to each qubit of the circuit at a certain step of it
MaxDens: Maximum number of operations applied to the circuit qubits in parallel.
AvgDens:Averageofthenumberofoperationsappliedtothecircuitqubitsinparallel.
3. Single qubit gates: The most commonly used gates in quantum circuits
* NoP-X: Number of Pauli-X (NOT) gates.
* NoP-Y: Number of Pauli-Y gates.
* NoP-Z: Number of Pauli-Z gates.
* TNo-P: Total number of Pauli gates in the circuit (calculated as the addition of the
previous three).
* NoH: Number of Hadamard gates.
* %SpposQ:RatioofqubitswithaHadamardgateasinitialgate(qubitsinsuperposition
state).
* NoOtherSG: Number of other4 single-qubit gates in the circuit.
* TNoSQG: Total number of single-qubit gates.
* TNoCSQG: Total number of controlled single-qubit gates.
4. Multiple qubit gates. Gates involving several qubits as input and output.
* NoCAnyG: Number of controlled (any) gates.
* NoSWAP: Number of swap gates.
* NoCNOT; Number of Controlled NOT (CNOT) gates.
* %QinCNOT: Ratio of qubits affected by CNOT gates.
* AvgCNOT: Average number of CNOT gates targeting any qubit of a circuit.
* MaxCNOT: Maximum number of CNOT gates targeting any qubit of a circuit.
* NoToff: Number of Toffoli gates.
* %QinToff: Ratio of qubits affected by Toffoli gates.
* AvgToff: Average number of Toffoli gates targeting any qubit of a circuit.
* MaxToff: Maximum number of Toffoli gates targeting any qubit of a circuit.
5. All gates in the circuit.
* NoGates: Total number of gates in the circuit.
* NoCGates: Total number of controlled gates in the circuit.
* %SGates: Ratio single vs total gates.
6. Oracles
* NoOr: Number of oracles in the circuit.
* NoCOr: Number of controlled oracles in the circuit.
* %QinOr: Ratio of qubits affected by oracles.
* %QinCOr: Ratio of qubits affected by controlled oracles.
* AvgOrD: Average depth of an oracle in the circuit.
* MaxOrD: Maximum depth of an oracle in the circuit.
7. Measurement gates
* NoQM: Number of qubits measured.
* %QM: Ratio of qubits measured.
8. Others
* %Anc: Ratio of ancilla (auxiliary) qubits in the circuit.";No
The Talavera Manifesto for Quantum Software Engineering and Programming;"Quantum Software Engineering; Quantum Computing; Manifesto; Talavera";This paper presents the Talavera Manifesto for quantum software en- gineering and programming. This manifesto collects some principles and com- mitments about the quantum software engineering and programming field, as well as some calls for action. This is the result of the discussion and different viewpoints of academia and industry practitioners who joined at the first Interna- tional Workshop on QuANtum SoftWare Engineering & pRogramming (QANSWER).;Article;2020;Open access;https://www.semanticscholar.org/paper/The-Talavera-Manifesto-for-Quantum-Software-and-Piattini-Peterssen/bf26163ea06e71684f78a59bbb720509f349dfb7;"1. QSE is agnostic regarding quantum programming languages and technologies
2. QSE embraces the coexistence of classical and quantum computing
3. QSE supports the management of quantum software development projects
4. QSE considers the evolution of quantum software
5. QSE aims at delivering quantum programs with desirable zero defects
6. QSE assures the quality of quantum software
7. QSE promotes quantum software reuse.
8. QSE addresses security and privacy by design
9. QSE covers the governance and management of software";No;No
Some Size and Structure Metrics for Quantum Software;"Quantum software metrics; quantum software engineering; quantum software design";"Quantum software plays a critical role in exploiting the full potential of quantum computing systems. As a result, it is drawing increasing attention recently. As research in quantum programming reaches maturity with a number of active research and practical products, software metric researchers need to focus on this new paradigm to evaluate it rigorously and quantitatively. As the first step, this paper proposes some basic metrics for quantum software, which mainly focus on measuring the size and structure of quantum software. These metrics are defined at different abstraction levels to represent various size and structure attributes in quantum software explicitly. The proposed metrics can be used to evaluate quantum software from various viewpoints.
";Article;2021;IEEE Computer Society, ;https://q-se.github.io/qse2021/;No;"BASIC SIZE METRICS
1. Code Size: Lines-of-Code, Halstead*s metrics
2. Design Size: Architectural Design Size, Detailed Design Size
3. Specification Size: Q-UML
BASIC STRUCTURE METRICS
1. McCabe*s Complexity.
2. Henry and Kafura*s information flow.";No
Training Computer Scientists for the Challenges of Hybrid Quantum-Classical Computing;"Computer science; Training;Bridges; Quantum system; Cloud computing; Quantum computing; Scientific computing; Hybrid power systems; Standards";As we enter the post-Moore era, we experience the rise of various non-von-Neumann-architectures to address the increasing computational demand for modern applications, with quantum computing being among the most prominent and promising technologies. However, this development creates a gap in current computer science curricula since most quantum computing lectures are strongly physics-oriented and have little intersection with the remaining curriculum of computer science. This fact makes designing an appealing course very difficult, in particular for non-physicists. Furthermore, in the academic community, there is consensus that quantum computers are going to be used only for specific computational tasks (e.g., in computational science), where hybrid systems - combined classical and quantum computers - facilitate the execution of an application on both quantum and classical computing resources. A hybrid system thus executes only certain suitable parts of an application on the quantum machine, while other parts are executed on the classical components of the system. To fully exploit the capabilities of hybrid systems and to meet future requirements in this emerging field, we need to prepare a new generation of computer scientists with skills in both distributed computing and quantum computing. To bridge this existing gap in standard computer science curricula, we designed a new lecture and exercise series on Hybrid Quantum-Classical Systems, where students learn how to decompose applications and implement computational tasks on a hybrid quantum-classical computational continuum. While learning the inherent concepts underlying quantum systems, students are obligated to apply techniques and methods they are already familiar with, making the entrance to the field of quantum computing comprehensive yet appealing and accessible to students of computer science;Conference paper;2024;IEEE Computer Society;;;No;"1. Current quantum computing courses are too physics-oriented and do not integrate well with the standard computer science curriculum, making it difficult to design an appealing course for non-physicists.

2. There is a need to train a new generation of computer scientists with skills in both distributed computing and quantum computing in order to fully exploit the capabilities of hybrid quantum-classical systems.

3. Quantum computing requires specific training to fully exploit its potential, including understanding quantum mechanical principles, reinventing and implementing quantum algorithms, and properly encoding classical data into the quantum domain."
Service engineering for quantum computing: Ensuring high-quality quantum services;"Quantum computing; Quantum software engineering; Quantum software quality; Process improvement";"Objective: The objective of this paper is to address the pressing need for quantum software quality assurance, presenting a solution for defining and using quantum services, by employing classical service engineering techniques and methods.
Methods: A process is presented for improving the generation, deployment, and quality assessment of quantum services using an extended OpenAPI Specification and the SonarQube tool. This process also integrates the automatic generation of code for the IBM Quantum provider and its deployment in containers ready for user consumption.
Results: After a detailed and individualized evaluation of the 40 implementations of quantum algorithms using the developed environment, the results reveal significant variability in the analyzability of the algorithms. This will serve in the future as a reference and guide for the continuous improvement of quantum algorithms in terms of their performance and efficiency in solving complex problems in various quantum application areas.
Conclusions: This research offers a fundamental contribution to the evolution of quantum computing by introducing a comprehensive framework for quantum software quality assurance. The proposed approach not only addresses some of the existing problems in quantum software, but also paves the way for the development of quantum algorithms and their servitization.";Article;2024;Information and Software Technology;https://www.sciencedirect.com/journal/information-and-software-technology;;"- Circuit Width (CW)
- Circuit Depth (CD)
- Complexity of circuit gates (CCG)
- Conditional instructions (CI)
- Quantum cyclomatic complexity (QCC)
- Measurement operations (MO)
- Initialize and reset operations (IRO)
- Auxiliary qubits (AQ)";No
